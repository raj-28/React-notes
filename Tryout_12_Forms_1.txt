React Forms
===========
HTML form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input. React can either
	1. refer to the form fields directly using Ref's or
	2. control the form fields using state of the component

Scenario 1, where HTML DOM handles the form data is called Uncontrolled component and is useful if React is working along with other UI libraries such as D3.js. In this case, input will not have value attribute and event handler, instead to get the value from the DOM ref will be used.

Scenario 2, is naturally called Controlled component. Form field's value and event handler will be linked to the state of the component.
    
Uncontrolled components
+++++++++++++++++++++++
To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.

1. Create a component UncontrolledForm under components\forms
	import React from "react";

	export default class UncontrolledForm extends React.Component {
	  constructor(props) {
		super(props);
		this.txtinput = React.createRef(); // direct reference to DOM node
	  }

	  handleSubmit = (event) => {
		// this must be done to stop page refresh
		event.preventDefault();
		if (this.txtinput.current.value === "") 
			alert("Pls enter name");
		else 
			alert("Submitted value: " + this.txtinput.current.value);
	  };

	  render() {
		return (
		  <form className="m-2 p-2" onSubmit={this.handleSubmit}>
			<h3>Uncontrolled Form</h3>
			<div className="form-group">
			  <label htmlFor="txtinput">Name: </label>
			  <input
				id="txtinput"
				type="text"
				className="form-control"
				placeholder="Your name"
				ref={this.txtinput}
				defaultValue="Nevil"
			  />
			</div>
			<div className="form-group">
			  <input type="submit" className="btn btn-primary" value="Submit" />
			</div>
		  </form>
		);
	  }
	}

Observe how the DOM node reference is created and defaultValue is given. 


2. Create FormsWrapper within the same folder and add it to navigation with path 'forms'
	import React from "react";
	import UncontrolledForm from "./UncontrolledForm";

	export default class FormsWrapper extends React.Component {
	  render() {
		return (
		  <React.Fragment>
			<h2>Forms in React</h2>
			<article className="m-1 border border-secondary rounded">
			  <UncontrolledForm />
			</article>
		  </React.Fragment>
		);
	  }
	}


<input type="checkbox"> and <input type="radio"> support defaultChecked, and <select> and <textarea> supports defaultValue.

In React, an <input type="file" /> is always an uncontrolled component because its value can only be set by a user, and not programmatically. You should always use the File API to interact with the files.

How do you decide which kind of form to use?
--------------------------------------------
Since an uncontrolled component keeps the source of truth in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. It can also be slightly less code if you want to be quick and dirty. Otherwise, you should usually use controlled components.
